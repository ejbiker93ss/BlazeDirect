@using BlazeDirect.Data
@using MudBlazor

<h3>Link Person to User</h3>

<MudForm @ref="form" OnValidSubmit="HandleSubmit">

    @* — LIST OF ALREADY LINKED USERS *@
    @if (LinkedUsers.Any())
    {
        <MudText Typo="Typo.h6" GutterBottom="true">Already Linked Users</MudText>
        @foreach (var user in LinkedUsers)
        {
            <MudPaper Class="d-flex align-items-center justify-space-between p-2 mb-2">
                <MudText>@user.Email</MudText>
                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                               Color="Color.Error"
                               OnClick="() => Unlink(user.Id)" />
            </MudPaper>
        }
        <MudDivider Class="my-4" />
    }

    @* — AUTOCOMPLETE TO LINK A NEW USER *@
    <MudAutocomplete T="ApplicationUser"
                     Label="Search and Select User"
                     @bind-Value="SelectedUser"
                     SearchFunc="SearchUsersAsync"
                     ToStringFunc="u => u?.Email ?? string.Empty"
                     CoerceText="true"
                     Clearable="true"
                     MinCharacters="1"
                     Placeholder="Type name or email…" />

    <MudButton ButtonType="ButtonType.Submit"
               Variant="Variant.Filled"
               Color="Color.Primary"
               Disabled="SelectedUser == null"
               Class="mt-4"
               onclick="HandleSubmit">
               
        Link User
    </MudButton>
</MudForm>

@code {
    [Parameter] public int PersonId { get; set; }

    private MudForm form = null!;
    private List<ApplicationUser> Users = new();
    private List<ApplicationUser> LinkedUsers = new();
    private ApplicationUser? SelectedUser;

    [Inject] private IUserService UserService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        Users = await UserService.GetUsersAsync();
        RefreshLinkedUsers();
    }

    private void RefreshLinkedUsers()
        => LinkedUsers = Users.Where(u => u.PersonID == PersonId).ToList();

    private Task<IEnumerable<ApplicationUser>> SearchUsersAsync(string text, CancellationToken _)
    {
        var list = string.IsNullOrWhiteSpace(text)
            ? Users
            : Users.Where(u => u.Email?.Contains(text, StringComparison.OrdinalIgnoreCase) == true).ToList();
        return Task.FromResult<IEnumerable<ApplicationUser>>(list);
    }

    private async Task HandleSubmit()
    {
        if (!form.IsValid || SelectedUser is null)
            return;

        SelectedUser.PersonID = PersonId;
        await UserService.LinkPersonToUser(SelectedUser);
        await ReloadAsync();
    }

    private async Task Unlink(string userId)
    {
        var user = Users.FirstOrDefault(u => u.Id == userId);
        if (user == null) return;

        user.PersonID = 0;
        await UserService.LinkPersonToUser(user);
        await ReloadAsync();
    }

    private async Task ReloadAsync()
    {
        SelectedUser = null;
        Users = await UserService.GetUsersAsync();
        RefreshLinkedUsers();
        form.ResetValidation();
    }
}
