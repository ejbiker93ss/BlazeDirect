@using BlazeDirect.Data
@using MudBlazor
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<ApplicationUser> UserManager

<MudAppBar Color="Color.Primary" Elevation="4">
    <!-- Hamburger toggle back in place -->
    <MudIconButton Icon="@Icons.Material.Filled.Menu"
    Color="Color.Inherit"
    Edge="Edge.Start"
    OnClick="ToggleNavMenu" />

    <MudText Typo="Typo.h6" Class="ml-4">BlazeDirect</MudText>
    <MudSpacer />

    @if (isAuthenticated)
    {
        <MudMenu Icon="@Icons.Material.Filled.AccountCircle" Class="ml-auto">
            <MudMenuItem>@userName</MudMenuItem>
            <MudMenuItem Href="Identity/Account/Logout">Log out</MudMenuItem>
        </MudMenu>
    }
</MudAppBar>

<MudDrawer Open="@(!isNavMenuCollapsed)" Anchor="Anchor.Left" Elevation="2" Width="260px">
    <MudNavMenu>
        <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">
            Dashboard
        </MudNavLink>
        <MudNavLink Href="People" Icon="@Icons.Material.Filled.Person">
            People
        </MudNavLink>
        <MudNavLink Href="fetchdata" Icon="@Icons.Material.Filled.Celebration">
            Celebrations
        </MudNavLink>

        @* only show “My Family” if PersonID > 0 *@
        @if (showMyFamilyLink)
        {
            <MudNavLink Href="MyFamily" Icon="@Icons.Material.Filled.Group">
                My Family
            </MudNavLink>
        }
        @if(IsAdmin)
        {
            <MudNavLink Href="upload-individuals-mud" Icon="@Icons.Material.Filled.Upload">
                Upload Individuals
            </MudNavLink>
            <MudNavLink Href="Users" Icon="@Icons.Material.Filled.AdminPanelSettings">
                Users
            </MudNavLink>
        }
        
    </MudNavMenu>
</MudDrawer>

@code {
    private bool isNavMenuCollapsed = true;
    private bool isAuthenticated;
    private bool showMyFamilyLink;
    private string? userName;
    private bool IsAdmin { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isAuthenticated = user.Identity?.IsAuthenticated == true;

        if (isAuthenticated)
        {
            // Load the full ApplicationUser so we can check PersonID
            var appUser = await UserManager.GetUserAsync(user);
            showMyFamilyLink = appUser?.PersonID > 0;
            userName = user.Identity?.Name;
            IsAdmin = appUser.UserLevelID > 2;
        }
    }

    private void ToggleNavMenu() => isNavMenuCollapsed = !isNavMenuCollapsed;
}
